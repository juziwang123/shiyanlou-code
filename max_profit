from enum import Enum


class Type(Enum):
    SELL = 0
    BUY = 1


class Transaction(object):

    def __init__(self, type, day, price):
        self.type = type
        self.day = day
        self.price = price

    def __eq__(self, other):
        return self.type == other.type and \
            self.day == other.day and \
            self.price == other.price

    def __repr__(self):
        return str(self.type) + ' day: ' + \
            str(self.day) + ' price: ' + \
            str(self.price)


class StockTrader(object):

    def find_max_profit(self, prices, k):
        if prices is None or k is None :
            raise TypeError('')
        if k = 0 :
            return 0 
        row_nums = k + 1 
        col_nums = len(prices)
        T = [[None]*row_nums for _ in range(col_nums)]
        for i  in range (1,row_nums):
            for j in range(1,col_nums):
                if i==0 or j==0 :
                    T[i][j]=0 
                    continue 
                max_profit = -sys.maxsize
                for m in range(j) : 
                   profit = prices[j] - prices[m] + T[i-1][m]
                   if profit > max_profit:
                     max_profit = profit 
            T[i][j] = max(T[i][j-1],max_profit)
        return _find_max_profit(T,prices)
    def _find_max_profit(self,T,prices):
        result = [] 
        i = len(T)-1
        j = len(T[0])-1
        max_profit = T[i][j]
        while i!=0 and j!=0 :
            if T[i][j] == T[i][j-1]:
                j-=1 
            else:
                sell_price = prices[j] 
                 
                result.append(Transaction(Type.SELL,j,prices[j]))
                profit = T[i][j] - T[i - 1][j - 1] 
                i-=1 
                j-=1
                for m in range(j+1)[::-1]:
                    if prices[m] == sell_price-profit : 
                        result.append(Transaction(Type.BUY,m,prices[m]))
                        break 
        return (max_profile,result) 
